<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mpi | Steven Danna's Blog]]></title>
  <link href="http://stevendanna.github.com/blog/categories/mpi/atom.xml" rel="self"/>
  <link href="http://stevendanna.github.com/"/>
  <updated>2013-07-02T07:56:02-07:00</updated>
  <id>http://stevendanna.github.com/</id>
  <author>
    <name><![CDATA[Steven Danna]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Snow and Chef]]></title>
    <link href="http://stevendanna.github.com/blog/2011/12/26/snow-and-chef/"/>
    <updated>2011-12-26T09:32:00-08:00</updated>
    <id>http://stevendanna.github.com/blog/2011/12/26/snow-and-chef</id>
    <content type="html"><![CDATA[<p>One of my major interests is programming in R.  I took a few days off
for Christmas break, and in between talking with family, watching old
movies, opening presents, and spreading Christmas cheer, I decided it
would be fun to use Chef to create a parallel computing environment
suitable for use with R.  As part of this project, I wrote:</p>

<ul>
<li>A Chef cookbook to install and configure R.</li>
<li>An R package provider to easily install packages from CRAN.</li>
<li>A Chef cookbook to install and configure MPI.</li>
</ul>


<p>This blog post outlines some of the highlights of this fun little
project. It isn&rsquo;t a step-by-step tutorial for creating such
an environment.  I assume that already have:</p>

<ul>
<li>General familiarity with R and Chef.  I talk about cookbooks,
recipes, and roles and assume you know what to do with them.</li>
<li>A means of provisioning computation nodes, each already configured
with hostnames that are resolvable to network addresses by other
computation nodes.</li>
</ul>


<p>I used vagrant to provision a few VMs for testing these recipes and a
small set of vagrant-specific cookbooks to ensure that each node had a
resolvable hostname.</p>

<h1>R Cookbook</h1>

<p>The first item every node in the cluster will need is R.  The R
cookbook on the Opscode Community site is a bit out of date.  I&rsquo;ve
created a newer version that can be found here:</p>

<p><a href="http://github.com/stevendanna/cookbook-r">http://github.com/stevendanna/cookbook-r</a></p>

<p>This cookbook does the following:</p>

<ul>
<li>Installs R from either the CRAN APT repository or from source depending
on the platform.</li>
<li>Defines a system-wide default CRAN mirror using an Rprofile.site
template.</li>
<li>Contains an R package provider that can install R packages available
on CRAN.</li>
</ul>


<p>Currently this cookbook is linux-centric and best suited for use on
Ubuntu or Debian.</p>

<h2>R Package Provider</h2>

<p>My R parallel computing environment relies on the &lsquo;snow&rsquo; and &lsquo;Rmpi&rsquo;
packages to manage communication with computation nodes.  Further, I
often need additional packages from CRAN when working with my cluster.
The R package provider in my R cookbook allows for easy, automated
installation of R packages.  It was written using Chef&rsquo;s Light-weight
Resource and Provider DSL.  The current version provides the minimal
necessary functionality:</p>

<p>``` ruby &ldquo;R package provider.  Corresponding resource description not shown.&rdquo;
action :install do
  execute &ldquo;Install R Package&rdquo; do</p>

<pre><code>command r_package_install(new_resource.package)
not_if r_package_is_installed(new_resource.package)
</code></pre>

<p>  end
end</p>

<p>action :upgrade do
  execute &ldquo;Upgrade R Package&rdquo; do</p>

<pre><code>command r_package_install(new_resource.package)
</code></pre>

<p>  end
end</p>

<p>action :remove do
  r_package_remove = &ldquo;remove.packages(&lsquo;#{new_resource.package}&rsquo;)&rdquo;
  execute &ldquo;Remove R Package&rdquo; do</p>

<pre><code>command "echo \"#{r_package_remove}\" | R --no-save --no-restore -q"
only_if r_package_is_installed(new_resource.package)
</code></pre>

<p>  end
end</p>

<h1>The following helper functions construct strings that can be run as</h1>

<h1>Bash commands. For example, as the input of not_if or only_if</h1>

<h1>statements</h1>

<p>def r_package_is_installed(package_name)
  r_code = &ldquo;if (any(installed.packages()[,1] == &lsquo;#{package_name}&rsquo;)) { quit(&lsquo;no&rsquo;, 0, FALSE) }; quit(&lsquo;no&rsquo;, 1, FALSE)&rdquo;
  &ldquo;echo \&rdquo;#{r_code}\&ldquo; | R &mdash;no-save &mdash;no-restore -q&rdquo;
end</p>

<p>def r_package_install(package_name)
  r_code = &ldquo;install.packages(&lsquo;#{package_name}&rsquo;)&rdquo;
  &ldquo;echo \&rdquo;#{r_code}\&ldquo; | R &mdash;no-save &mdash;no-restore -q&rdquo;
end
```</p>

<p>It supports three actions: <code>:install</code>, <code>:upgrade</code>, and
<code>:remove</code>; however, it is not very feature-rich.  A few features I
would like to add include:</p>

<ul>
<li>The ability to specify the CRAN mirror or repository.</li>
<li>The ability to install local packages</li>
<li>The ability to install packages on a per-user basis.</li>
</ul>


<p>Despite these shortcomings, the current provider works well enough for
my purposes and is a good example of Chef&rsquo;s high-level of
&lsquo;Whip-It-Up-itude.&rsquo;  Within a few minutes, I was able to go from some
quick-and-dirty R code to a Chef provider that I can iteratively
improve as my needs become more complex.  While I did not include it
in the repository linked above, I was able to create a small <code>R::snow</code>
recipe that does little more than use this provider:</p>

<p>``` ruby
R_package &ldquo;snow&rdquo;</p>

<p>case node[&lsquo;R&rsquo;][&lsquo;snow&rsquo;][&lsquo;cluster_type&rsquo;]
when &lsquo;mpi&rsquo;
  include_recipe &lsquo;mpi&rsquo;
  R_package &lsquo;Rmpi&rsquo;
end
```</p>

<h1>MPI Cookbook</h1>

<p>The R package &lsquo;snow&rsquo; can use various backends to communicate with
computation nodes.  The default method for most commands is &ldquo;Message
Passing Interface&rdquo; (MPI).  MPI is also generally useful outside of R
as you can easily use MPI utilities such as mpirun to execute a
command on multiple computation nodes and use MPI&rsquo;s C libraries to
write programs designed for parallel computation.</p>

<p>MPI has multiple implementation.  I&rsquo;ve written an MPI cookbook that
can install <a href="http://www.open-mpi.org/">openmpi</a> on Ubuntu.  It can be found here:</p>

<p><a href="https://github.com/stevendanna/cookbook-mpi">https://github.com/stevendanna/cookbook-mpi</a></p>

<p>This cookbook does the following:</p>

<ul>
<li>Installs openmpi on Ubuntu</li>
<li>Constructs a list of computation nodes within your environment using
search and then renders a default hostfile that is used by MPI
commands such as mpirun.</li>
<li>Sets basic configuration options that I have found useful.</li>
</ul>


<p>While MPI does not natively contain the concepts of master and slaves
(every MPI node can talk to any other MPI node), I found it useful to
include the concept of a node&rsquo;s &ldquo;MPI role.&rdquo;  I use this role to
populate the default hostfile, since there are often cases where you
might want MPI installed on a machine within your environment but
would not want that machine being used for computation.</p>

<h1>Putting it all Together</h1>

<p>I put this all together using two roles: snow_master and snow_slave</p>

<p>``` ruby roles/snow_master.json
{</p>

<pre><code>"name" : "snow_master",
"json_class" : "Chef::Role",
"chef_type" : "role",
"run_list" : [ "recipe[R]", "recipe[R::snow]", "recipe[mpi]", "recipe[ssh_known_hosts]" ],
"default_attributes" : {
    "mpi" : {
        "role": "master"
    }
}
</code></pre>

<p>}
```</p>

<p>``` ruby roles/snow_slave.json
{</p>

<pre><code>"name" : "snow_slave",
"json_class" : "Chef::Role",
"chef_type" : "role",
"run_list" : [ "recipe[R]", "recipe[R::snow]", "recipe[mpi]", "recipe[ssh_known_hosts]" ]
</code></pre>

<p>}
```</p>

<p>By applying the snow_slave role to all of the nodes I wanted within
my computation cluster and the snow_master role to the machine I will
use to launch jobs in my cluster, I can quickly bring up a new cluster
of machines suitable for doing parallel computation in R using snow.</p>

<p>The ssh_known_hosts recipe is directly from the Opscode community
site and helps make ssh connections between the nodes a bit smoother.</p>

<h1>Twelve Days of Chistmas</h1>

<p>As an example of how easy it is to do simple parallel computation
using snow, consider the following Chistmas-themed R function.</p>

<p>``` r
twelve_days_of_christmas &lt;&ndash; function (n) {
  if (!any(1:12 == n)) stop(&ldquo;Not a day of Chirstmas!&rdquo;)
  LYRICS &lt;&ndash; c(&ldquo;a Partridge in a Pear Tree.&rdquo;,</p>

<pre><code>          "Two Turtle Doves",
          "Three French Hens",
          "Four Colly Birds",
          "Five Golden Rings",
          "Six Geese-a-Laying",
          "Seven Swans-a-Swimming",
          "Eight Maids-a-Milking",
          "Nine Ladies Dancing",
          "Ten Lords-a-Leaping",
          "Eleven Pipers Piping",
          "Twleve Drummers Drumming")
</code></pre>

<p>  append = c(&ldquo;st&rdquo;, &ldquo;nd&rdquo;, &ldquo;rd&rdquo;, rep(&ldquo;th&rdquo;,9))
  if (n > 1) LYRICS[1] = paste(&ldquo;and&rdquo;, LYRICS[1])
  paste(&ldquo;On the&rdquo;,</p>

<pre><code>    paste(n, append[n], sep=""),
    "day of Christmas, my true love gave to me",
    paste(LYRICS[n:1], collapse=", "))
</code></pre>

<p>}
```</p>

<p>Assuming chef-client has been run on all of our nodes, we can simply
log into our &lsquo;snow master&rsquo;, boot up R, and run the following code:</p>

<p>``` r</p>

<blockquote><p>library(&lsquo;snow&rsquo;)
source(&lsquo;twelve_days.r&rsquo;)
cl &lt;&ndash; makeCluster(2)
clusterApply(cl, 1:12, twelve_days_of_christmas)
[[1]]
[1] &ldquo;On the 1st day of Christmas, my true love gave to me a Partridge in a Pear Tree.&rdquo;</p></blockquote>

<p>[[2]]
[1] &ldquo;On the 2nd day of Christmas, my true love gave to me Two Turtle Doves, and a Partridge in a Pear Tree.&rdquo;</p>

<p>[[3]]
[1] &ldquo;On the 3rd day of Christmas, my true love gave to me Three French Hens, Two Turtle Doves, and a Partridge in a Pear Tree.&rdquo;</p>

<p>[[4]]
[1] &ldquo;On the 4th day of Christmas, my true love gave to me Four Colly Birds, Three French Hens, Two Turtle Doves, and a Partridge in a Pear Tree.&rdquo;</p>

<p>[[5]]
[1] &ldquo;On the 5th day of Christmas, my true love gave to me Five Goldedn Rings, Four Colly Birds, Three French Hens, Two Turtle Doves, and a Partridge in a Pear Tree.&rdquo;</p>

<p>[[6]]
[1] &ldquo;On the 6th day of Christmas, my true love gave to me Six Geese-a-Laying, Five Goldedn Rings, Four Colly Birds, Three French Hens, Two Turtle Doves, and a Partridge in a Pear Tree.&rdquo;</p>

<p>[[7]]
[1] &ldquo;On the 7th day of Christmas, my true love gave to me Seven Swans-a-Swimming, Six Geese-a-Laying, Five Goldedn Rings, Four Colly Birds, Three French Hens, Two Turtle Doves, and a Partridge in a Pear Tree.&rdquo;</p>

<p>[[8]]
[1] &ldquo;On the 8th day of Christmas, my true love gave to me Eight Maids-a-Milking, Seven Swans-a-Swimming, Six Geese-a-Laying, Five Goldedn Rings, Four Colly Birds, Three French Hens, Two Turtle Doves, and a Partridge in a Pear Tree.&rdquo;</p>

<p>[[9]]
[1] &ldquo;On the 9th day of Christmas, my true love gave to me Nine Ladies Dancing, Eight Maids-a-Milking, Seven Swans-a-Swimming, Six Geese-a-Laying, Five Goldedn Rings, Four Colly Birds, Three French Hens, Two Turtle Doves, and a Partridge in a Pear Tree.&rdquo;</p>

<p>[[10]]
[1] &ldquo;On the 10th day of Christmas, my true love gave to me Ten Lords-a-Leaping, Nine Ladies Dancing, Eight Maids-a-Milking, Seven Swans-a-Swimming, Six Geese-a-Laying, Five Goldedn Rings, Four Colly Birds, Three French Hens, Two Turtle Doves, and a Partridge in a Pear Tree.&rdquo;</p>

<p>[[11]]
[1] &ldquo;On the 11th day of Christmas, my true love gave to me Eleven Pipers Piping, Ten Lords-a-Leaping, Nine Ladies Dancing, Eight Maids-a-Milking, Seven Swans-a-Swimming, Six Geese-a-Laying, Five Goldedn Rings, Four Colly Birds, Three French Hens, Two Turtle Doves, and a Partridge in a Pear Tree.&rdquo;</p>

<p>[[12]]
[1] &ldquo;On the 12th day of Christmas, my true love gave to me Twleve Drummers Drumming, Eleven Pipers Piping, Ten Lords-a-Leaping, Nine Ladies Dancing, Eight Maids-a-Milking, Seven Swans-a-Swimming, Six Geese-a-Laying, Five Goldedn Rings, Four Colly Birds, Three French Hens, Two Turtle Doves, and a Partridge in a Pear Tree.&rdquo;
```</p>

<h1>Conclusion</h1>

<p>Overall this was a fun project to do over break.  It took a handful of
hours to complete, most of which was dedicated to a few problems not
discussed in this post:</p>

<ul>
<li>Making hostnames resolvable and other network oddities within my
Vagrant test environment.</li>
<li>Deciding which implementation of MPI to use.</li>
</ul>


<p>I personally would like to see further work done around using Chef to
manage large R environments. Some work I hope to do in the not to
distant future includes:</p>

<ul>
<li>Expand the R cookbook to better support OS X.</li>
<li>Add support to detect the latest version when doing a source install.</li>
<li>Expand the R package provider to include more of the features available
when installing package from within R.</li>
<li>Write an R Ohai plugin that would collect information about:

<ul>
<li>R version and capabilities</li>
<li>R packages installed</li>
</ul>
</li>
</ul>


<p>Happy Holidays!</p>
]]></content>
  </entry>
  
</feed>
